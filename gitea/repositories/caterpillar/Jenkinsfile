pipeline {
    agent any
    environment {
        PROJECT = "loguru"
        PRISMA_API_URL = "https://api2.prismacloud.io"
    }

    stages {
        stage('Install_Requirements') {
            steps {
                sh """
                    virtualenv venv
                    pip3 install -r requirements.txt || true
                """
            }
        }

        stage('Lint') {
            steps {
                sh "pylint ${PROJECT} || true"
            }
        }

        stage('Unit Tests') {
            steps {
                sh "pytest || true"
            }
        }

        stage('deploy') {
            when {
                expression {
                    env.BRANCH_NAME == 'main'
                }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: 'flag2', usernameVariable: 'flag2', passwordVariable: 'TOKEN')]) {
                    sh 'curl -isSL "http://wonderland:1234/api/user" -H "Authorization: Token ${TOKEN}" -H "Content-Type: application/json" || true'
                }
            }
        }

        stage('Checkout and Checkov') {
            steps {
                git branch: 'main', url: 'https://github.com/pranay-harness/cicd-goat'
                stash includes: '**/*', name: 'source'

                withCredentials([string(credentialsId: 'PC_USER', variable: 'pc_user'), string(credentialsId: 'PC_PASSWORD', variable: 'pc_password')]) {
                    script {
                        docker.image('bridgecrew/checkov:latest').inside("--entrypoint=''") {
                            unstash 'source'
                            try {
                                sh 'checkov -d . --use-enforcement-rules -o cli -o junitxml --output-file-path console,results.xml --bc-api-key ${pc_user}::${pc_password} --repo-id  pranay-harness/cicd-goat --branch main'
                                junit skipPublishingChecks: true, testResults: 'results.xml'
                            } catch (err) {
                                junit skipPublishingChecks: true, testResults: 'results.xml'
                                throw err
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
    
    options {
        preserveStashes()
        timestamps()
    }
}
